'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fs = _interopDefault(require('fs'));
var path = _interopDefault(require('path'));

/**
 * Generates a html file from a template that either has the bundle included using a script-tag with src or inlined in a script-tag.
 * Will by default use a script-tag with src and place a query string with v = Date.now() at the end of the path, to avoid using a cached bundle.js in dev.
 * @param {Object} userOptions The options object.
 * @return {Object} The rollup code object.
 */
function bundle(userOptions) {
    if ( userOptions === void 0 ) userOptions = {};

    var options = {
        template: 'src/template.html',
        target: 'dist/index.html',
        targetElement: 'body',
        timestamp: true,
        inline: false,
        async: false,
        defer: false
    };
    Object.assign(options, userOptions);
    return {
        name: 'html-bundle',
        generateBundle: function (outputOptions, bundle, isWrite) {
            return new Promise(function (accept, reject) {
                if (!isWrite) { return accept(); }
                var attr = '', inject = '';
                if (options.async) { attr += ' async'; }
                if (options.defer) { attr += ' defer'; }

                fs.readFile(path.resolve(options.template), 'utf8', function (err, templateContent) {
                    if (err) { return reject(err); }

                    var targetIndex = templateContent.lastIndexOf(("</" + (options.targetElement) + ">"));
                    if (targetIndex === -1)
                        { return reject("invalid targetElement"); }

                    Object.values(bundle).forEach(function (module) {
                        if (err) {
                            reject(err);
                            throw err;
                        }

                        if (options.inline) {
                            inject += "<script" + attr + ">\n" + (module.code) + "</script>\n";
                        }

                        else {
                            var src = path.basename(module.fileName) + (options.timestamp ? ("?v=" + (Date.now())) : '');
                            inject += "<script" + attr + " src=\"" + src + "\"></script>\n";
                        }
                    });

                    var bundledContent = templateContent.substr(0, targetIndex) + inject + templateContent.substr(targetIndex);
                    fs.writeFile(path.resolve(options.target), bundledContent, function (err) { return err ? reject(err) : accept(); });
                });
            })
        },
    };
}

module.exports = bundle;
